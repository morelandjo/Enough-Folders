plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.78'
    id 'jacoco'  // Add JaCoCo plugin
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id 

repositories {
    // Maven Central should be first to find standard Java libraries
    mavenCentral()
    mavenLocal()
    
    // Additional repositories for Java libraries
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    
    // NeoForge repositories
    maven {
        name = "NeoForged"
        url = "https://maven.neoforged.net/releases"
    }
    
    // JEI repositories
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    
    // CurseMaven repository for FTB Library
    maven {
        name = "CurseMaven"
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    
    // REI repositories
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "Shedaniel Maven"
        url = "https://maven.shedaniel.me/"
    }
    maven {
        name = "Architectury Maven"
        url = "https://maven.architectury.dev/"
    }
}

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
    withJavadocJar()
    withSourcesJar()
}

neoForge {
    version = neo_version

    parchment {
        mappingsVersion = parchment_mappings_version
        minecraftVersion = parchment_minecraft_version
    }

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
            systemProperty 'enoughfolders.debug', 'true'
        }
        
       
        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets {
    main {
        resources { 
            srcDir 'src/generated/resources'
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
    api
    implementation.extendsFrom(api)
    
    
}

dependencies {
    // JEI dependencies marked as compileOnly to make them optional at runtime
    compileOnly("mezz.jei:jei-${mc_version}-common-api:${jei_version}") {
        exclude group: 'net.minecraftforge'
    }
    compileOnly("mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}") {
        exclude group: 'net.minecraftforge'
    }
    
    // JEI implementation as runtimeOnly for development, not required at compile time
    runtimeOnly("mezz.jei:jei-${mc_version}-neoforge:${jei_version}") {
        exclude group: 'net.minecraftforge'
    }
    
   
    
    // REI dependencies - marked as compileOnly to make them optional at runtime
    compileOnly("me.shedaniel:RoughlyEnoughItems-api-neoforge:16.0.797") {
        exclude group: 'net.minecraftforge'
    }
    compileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-neoforge:16.0.797") {
        exclude group: 'net.minecraftforge'
    }
    compileOnly("dev.architectury:architectury-neoforge:13.0.8") {
        exclude group: 'net.minecraftforge'
    }
    compileOnly("me.shedaniel.cloth:cloth-config-neoforge:15.0.140") {
        exclude group: 'net.minecraftforge'
    }
    
    // REI runtime only dependencies for development environment
    runtimeOnly("me.shedaniel:RoughlyEnoughItems-neoforge:16.0.797") {
        exclude group: 'net.minecraftforge'
    }
    
   
    
    // FTB Library as an optional dependency from CurseMaven
    compileOnly "curse.maven:ftb-library-forge-404465:6466106"
    
    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testImplementation 'org.mockito:mockito-core:4.11.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.11.0'
    testImplementation 'com.google.code.gson:gson:2.10.1'  // For JSON serialization in tests
    
    // Make Minecraft classes available in test - needed for proper mocking
    testImplementation sourceSets.main.output
}

// JaCoCo configuration
jacoco {
    toolVersion = "0.8.10" // Latest version compatible with Java 21
}

jacocoTestReport {
    reports {
        xml.required = true  // For integration with other tools like SonarQube
        html.required = true // For human-readable reports
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                // Exclude generated code
                "**/*_Factory.*",
                "**/*_MemberInjector.*",
                "**/build/generated/**",
                // Exclude data files that aren't relevant for coverage
                "**/data/**",
                // Exclude specific packages if needed
                "**/com/enoughfolders/api/**"
            ])
        }))
    }
    
    // Add dependencies for better reports
    dependencies {
        jacocoAgent 'org.jacoco:org.jacoco.agent:0.8.10'
        jacocoAnt 'org.jacoco:org.jacoco.ant:0.8.10'
    }
}

// Hook JaCoCo reporting to test task
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
    // Exclude the WorldStorageTest that depends on Minecraft classes
    exclude "**/WorldStorageTest.class"
    finalizedBy jacocoTestReport
    jacoco {
        includes = ['com.enoughfolders.*']
    }
}




// Process templates for mod metadata
def generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    def replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

// Configure Java tasks
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.incremental = true
    options.deprecation = true
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

// IDE configuration
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
