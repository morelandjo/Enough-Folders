plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.78'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id 

repositories {
    // Maven Central
    mavenCentral()
    mavenLocal()
    
    // Additional repositories for Java libraries
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    
    // NeoForge repositories
    maven {
        name = "NeoForged"
        url = "https://maven.neoforged.net/releases"
    }
    
    // JEI repositories
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    
    // CurseMaven repository for FTB Library
    maven {
        name = "CurseMaven"
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    
    // REI repositories
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    // EMI Maven Repository  
    maven {
        name = "TerraformersMC EMI"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Shedaniel Maven"
        url = "https://maven.shedaniel.me/"
    }
    maven {
        name = "Architectury Maven"
        url = "https://maven.architectury.dev/"
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
}

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
    withJavadocJar()
    withSourcesJar()
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
    api
    implementation.extendsFrom(api)
    
    // Create separate configurations for different recipe viewers
    jeiRuntime
    reiRuntime  
    // emiRuntime  // Disabled for 1.21.4 until EMI updates
}

neoForge {
    version = neo_version

    parchment {
        mappingsVersion = parchment_mappings_version
        minecraftVersion = parchment_minecraft_version
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets {
    main {
        resources { 
            srcDir 'src/generated/resources'
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
    
    // Create separate source sets for different recipe viewer integrations
    jeiClient {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources', 'src/generated/resources']
        }
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
    
    reiClient {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources', 'src/generated/resources']
        }
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
    
    // EMI source set - DISABLED for 1.21.4 until EMI updates
    /*
    emiClient {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources', 'src/generated/resources']
        }
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
    */
}

dependencies {
    // JEI dependencies marked as compileOnly to make them optional at runtime
    compileOnly("mezz.jei:jei-${mc_version}-common-api:${jei_version}") {
        exclude group: 'net.minecraftforge'
    }
    compileOnly("mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}") {
        exclude group: 'net.minecraftforge'
    }
    
    // JEI implementation for specific JEI runtime
    jeiRuntime("mezz.jei:jei-${mc_version}-neoforge:${jei_version}") {
        exclude group: 'net.minecraftforge'
    }
    
   
    
    // REI dependencies
    compileOnly("me.shedaniel:RoughlyEnoughItems-api-neoforge:18.0.804") {
        exclude group: 'net.minecraftforge'
    }
    compileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-neoforge:18.0.804") {
        exclude group: 'net.minecraftforge'
    }
    compileOnly("dev.architectury:architectury-neoforge:15.0.3") {
        exclude group: 'net.minecraftforge'
    }
    compileOnly("me.shedaniel.cloth:cloth-config-neoforge:17.0.144") {
        exclude group: 'net.minecraftforge'
    }
    
    // REI runtime dependencies for specific REI runtime and development
    reiRuntime("me.shedaniel:RoughlyEnoughItems-neoforge:18.0.804") {
        exclude group: 'net.minecraftforge'
    }
    reiRuntime("dev.architectury:architectury-neoforge:15.0.3") {
        exclude group: 'net.minecraftforge'
    }
    reiRuntime("me.shedaniel.cloth:cloth-config-neoforge:17.0.144") {
        exclude group: 'net.minecraftforge'
    }
    
    // EMI dependencies - DISABLED for 1.21.4 until EMI updates
    // compileOnly "dev.emi:emi-neoforge:1.1.22+1.21.1:api"
    
    // EMI runtime for specific EMI runtime and development - DISABLED
    // emiRuntime "dev.emi:emi-neoforge:1.1.22+1.21.1"
    
    // Source set specific dependencies
    jeiClientRuntimeOnly("mezz.jei:jei-${mc_version}-neoforge:${jei_version}") {
        exclude group: 'net.minecraftforge'
    }
    
    reiClientRuntimeOnly("me.shedaniel:RoughlyEnoughItems-neoforge:18.0.804") {
        exclude group: 'net.minecraftforge'
    }
    reiClientRuntimeOnly("dev.architectury:architectury-neoforge:15.0.3") {
        exclude group: 'net.minecraftforge'
    }
    reiClientRuntimeOnly("me.shedaniel.cloth:cloth-config-neoforge:17.0.144") {
        exclude group: 'net.minecraftforge'
    }
    
    // EMI client runtime - DISABLED for 1.21.4 until EMI updates
    // emiClientRuntimeOnly "dev.emi:emi-neoforge:1.1.22+1.21.1"
    
   
    
    // FTB Library as an optional dependency from CurseMaven
    compileOnly "curse.maven:ftb-library-forge-404465:6466106"
    
}

// Configure NeoForge run configurations after source sets are defined
neoForge {
    runs {
        client {
            client()
            systemProperty 'enoughfolders.debug', 'true'
        }
        
        // Client with only JEI
        clientJEI {
            client()
            systemProperty 'enoughfolders.debug', 'true'
            gameDirectory = project.file('run/jei')
        }
        
        // Client with only REI
        clientREI {
            client()
            systemProperty 'enoughfolders.debug', 'true'
            gameDirectory = project.file('run/rei')
        }
        
        // Client with only EMI - DISABLED for 1.21.4 until EMI updates
        /*
        clientEMI {
            client()
            systemProperty 'enoughfolders.debug', 'true'
            gameDirectory = project.file('run/emi')
        }
        */
       
        server {
            server()
            programArgument '--nogui'
        }

        data {
            data()
            programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }
}

// Configure run tasks to use specific runtime dependencies
afterEvaluate {
    // Get the actual run task configurations and modify their classpaths
    def clientJEITask = tasks.findByName('runClientJEI')
    if (clientJEITask) {
        clientJEITask.classpath = clientJEITask.classpath + configurations.jeiRuntime
    }
    
    def clientREITask = tasks.findByName('runClientREI')
    if (clientREITask) {
        clientREITask.classpath = clientREITask.classpath + configurations.reiRuntime
    }
    
    // EMI disabled for 1.21.4 until EMI updates
    /*
    def clientEMITask = tasks.findByName('runClientEMI')
    if (clientEMITask) {
        clientEMITask.classpath = clientEMITask.classpath + configurations.emiRuntime
    }
    */
}

// Debug task to check what dependencies are included in each run configuration
tasks.register('debugRunDependencies') {
    doLast {
        println "=== JEI Runtime Dependencies ==="
        configurations.jeiRuntime.files.each { file ->
            println "  ${file.name}"
        }
        
        println "\n=== REI Runtime Dependencies ==="
        configurations.reiRuntime.files.each { file ->
            println "  ${file.name}"
        }
        
        // EMI disabled for 1.21.4 until EMI updates
        /*
        println "\n=== EMI Runtime Dependencies ==="
        configurations.emiRuntime.files.each { file ->
            println "  ${file.name}"
        }
        */
    }
}

// Process templates for mod metadata
def generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    def replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

// Configure Java tasks
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.incremental = true
    options.deprecation = true
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

// IDE configuration
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
